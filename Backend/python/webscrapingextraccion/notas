Curso:
https://www.udemy.com/course/curso-web-scraping-con-python/

Instructor:
https://www.udemy.com/user/pedro-javier-3/
https://www.udemy.com/user/lionguard-academy/

Este curso incluye:
  8,5 horas de vídeo bajo demanda
  1 artículo
  Acceso de por vida
  Acceso en dispositivos móviles y TV
  Certificado de finalización

>>>> Seccion
<<<< Capitulo
.... Recursos
---- Enlaces

>>>> Seccion 1 "Introduccion"
<<<< Cap 1 "Introduccion"
<<<< Cap 2 "Inicio del curso!"

links redes sociales
https://youtube.com/@anormalix
https://instagram.com/anormalix_oficial/
https://linkedin.com/in/pedro-javier-vargas

>>>> Seccion 2 "Instalacion de Entorno"
<<<< Cap 3 "Instalacion de python"
https://www.python.org/downloads/

<<<< Cap 4 "Instalacion de sublime text 3 en Windows"
https://www.sublimetext.com/3

<<<< Cap 5 "Configuracion de sublime text 3"
* Poner Sublime en modo python3
* Algunos paquetes interesantes
- All_autocomplete
- FileIcons
- Package Control
- Python 3

-> Tools -> Install Package Control...

Ctrl+Shift+P
  python3
  All Autocomplete

>>>> Seccion 3 "HTML basico!"
<<<< Cap 6 "HTML Tag"
dentro de un archivo index.html
  html:5 
    Estructura completa con emmet
    <html><head><body>
    
<<<< Cap 7 "h1...6"
  <h1>Hola</h1>
  <h2>Que</h2>
  <h3>Tal</h3>
  <h6>Tal</h6>

<<<< Cap 8 "P"
  <p>esto es un parrafo</p>

<<<< Cap 9 "Imagen y Video"
  <img src="./imagen.jpg" width="300">
  <video controls src="./video.mp4" type="video/mp4" controls></video>

<<<< Cap 10 "A"
  <a href="google.com" target="_blank"></a>

<<<< Cap 11 "Formularios"
  <form action="POST">
    <label for="user">Usuario</label>
    <input type="text" id="user">
    <label for="pass">Contrasena</label>
    <input type="password" id="pass">
    
    <select id="" name="genero">
      <option value="masculino">Maculino</option>
      <option value="femenino">Femenino</option>
    </select>
    <button type="Submit">Enviar</button>
  </form>

<<<< Cap 12 "Listas"
  <ol>
    <li><a href="#">canal youtube</a></li>
    <li>Promgramacion</li>
  </ol>

  <ul>
    <li>Linux</li>
    <li>Hacking</li>
  </ul>

<<<< Cap 13 "Clases e IDs"
  <ol class='info'>
    <li><a href="#">canal youtube</a></li>
    <li>Promgramacion</li>
  </ol>
  <ul class='info' id='ajusteidunico'>
    <li>Linux</li>
    <li>Hacking</li>
  </ul>

>>>> Seccion 4 "Aprender a usar Python"
<<<< Cap 14 "?Por que Python"
Facilidad, Syntasix mas facil, Popularidad

<<<< Cap 15 "Introduccion a Python"
crear archivo python 1_helloworld.py
  print("Hello World!")

Ctrl + b                -> En sublime para ejecutar
python 1_helloworld.py  -> en terminal para ejecutar

2_fundamentos.py explicacion de sintaxis

<<<< Cap 16 "Tipo String"
* los strings o cadenas estan encerrados en cadenas
* algunas funciones de string
variable[0] -> Se utiliza para acceder a un caracter especifico
len(variable) -> retorna el tamano del string
variable.isupper() | variable.islower() -> verifica si el texto esta en mayuscula o en minuscula
variable.upper() | variable.lower() -> pone el texto en mayuscula o minuscula

python/3_string.py

<<<< Cap 17 "Tipo int"
* Los entero son tipos de datos que almacenan numeros no decimales
(no hay problemas con los positivos o negativos)

python/4_int.py

<<<< Cap 18 "Tipo float"
* para castear la vareable decimal a entero o si solo se quiere cierto numero de decimales se puede usar round(valor,decimales)

python/5_float.py

<<<< Cap 19 "Tipo Booleano"
* Solo expresan dos valores (True, False)
* Se ve mucho en comparaciones, cnodicionales, bluces etc

python/6_bool.py

<<<< Cap 20 "Operadores Artimeticos"
Suma            -> +
Resta           -> -
Multiplicacion  -> *
Exponente       -> **
Division        -> /
Divison Entera  -> //
Modulo          -> %

python/7_operadores_aritmeticos.py

<<<< Cap 21 "Operadores de Asignacion"
* No significa comparacion
+=
-=
*=
/=
**=
//=
%=

python/8_operadores_asignacion.py


<<<< Cap 22 "Operadores de Comparacion"
igualdad          ==
Diferente         !=
Mayor que         >
Mayor o igual que >=
Menor que         <
Menor o igual que <=

python/9_operadores_comparacion.py

<<<< Cap 23 "Operadores Logicos"
* AND retorna verdadero si todas las condiciones lo son
* OR retorna verdadero si ay por lo menos una verdadera
* NOT retorna lo condicion resultante contraria

Se entiende facilmente con la "tabla de la verdad"

python/10_operadores_logicos.py

<<<< Cap 24 "Entrada de datos"
* Se usa para interacion con el usuario
* Para realizar la peticion de un dato usaremos <input>

python/11_io.py

<<<< Cap 25 "If"
* if - else se utiliza para comparar una o mas condiciones
* se puede omitir el else

python/12_if.py
python/13_ifvarios.py

<<<< Cap 26 "Elif"
* elif ayuda a poner mas condiciones a nuestro if

python/14_elif.py

<<<< Cap 27 "While"
* Nos permite ejecutar un bloque de codigo multiples veces siempre que la condicion sea verdadera

python/15_while.py

<<<< Cap 28 "For"
* Nos permite ejecutar un bloque de codigo multiples veces siempre que la condicion sea verdadera
* Nos permite realizar iteraciones sobre items de una secuencia como listas o cadenas de texto

* pass no omite la iteracion como un continue

python/16_for.py

<<<< Cap 29 "Range"
* Iteraciones mediante rangos
range(0,10)

python/17_range.py

<<<< Cap 30 "Break"
* Representa una ruptura del bucle
* Tambien tenemos una sentencia continue pero es muy poco usada

python/18_break.py

<<<< Cap 31 "Listas"
* Las listas son sencuencias de datos que estan definidas entre [] y van separadas por comas
* Metodos:
  * len(lista) -> Tamano de la lista
  * lista[0] -> Obtener el valor de una posicion definida
  * lista.append(valor) -> Agrega valores a la lista
  * lista.count(valor) -> Muestra cantidad de veces que se encuentra el valor
  * lista.insert(posicion,valor) -> Inserta un elemento en una posicion
  * lista.pop() -> devuelve El ultimo valor de una lista
  * lista.remove(valor) -> Elimina la primera aparicion de un valor
  * lista.index(dato) -> Devuelve la posicion
  * lista.reverse() -> Invierte el orden de la lista
  * lista.sort() -> Ordena los elementos de una lista

variable = [1,2,3,4]
variable2 = ["hola",2,2.0]

python/19_listas.py
python/20_listas_metodos.py

<<<< Cap 32 "Diccionarios"
* Los diccionarios son secuencias de datos que estan definidas entre {} y muestran una relacion de clave-valor
* Metodos:
  * diccionario[clave] -> acceder al valor
  * diccionario[clave] = valor-> Asignar valor o ingresar nueva relacion
  * diccionario.clear() -> limpia el diccionario
  * diccionario.items() -> retorna (clave,valor)
  * diccionario.keys() -> retorna claves
  * diccionario.values() -> retorna valores
  * Dato: puedes utilizar in para buscar una clave

python/21_diccionarios.py

<<<< Cap 33 "Tuplas"
* Es un tipo de dato de lista inmutable, esta no puede ser editada de ningun modo. las tuplas se identifican con los parentesis

Count(dato) -> cuenta la cantidad de veces que se repite un dato
Index(dato) -> resive un elemento como argumento y devuelve su indice

python/22_tupla.py

<<<< Cap 34 "Manejo de Archivos"
* Gracias al manejo de archivos logramos tener persistencia de datos al momento de ejecutar un proceso
* Para abrir un fichero tendremos que utilizar el comando open(archivo,modo)
  * Write   (w)
  * Read    (r)
  * Append  (a) 

python/23_manejo_archivos.py

<<<< Cap 35 "Leer Ficheros"
* Iniciaremos un archivo en modo lectura
* Para leer el documento tenemos que utilizar la funcion read() y alamacenarlo en una variable o imprimirlo

python/24_lectura.py
python/file/pass.txt
python/file/users.txt

<<<< Cap 36 "Escribir Ficheros"
* Iniciaremos abriendo un archivo en modo escritura
* Para escribir el documento tenemos que utilizar la funcion write()
* Utilizando el modo escritura podemos crear archivos 

python/25_escritura.py

<<<< Cap 37 "Anadir"
* Iniciaremos abriendo un archivo en modo escritura
* Para escribir el documento tenemos que utilizar la funcion write()
* Utilizando el modo append podemos crear archivos 

python/26_append.py

<<<< Cap 38 "Eliminar"
* Utilizaremos el paquete os y llamar a la funcion remove
  * from os import remove

python/27_eliminar.py

<<<< Cap 39 "Funciones"
* Las funciones son listas de codigo agrupadas que realizan una funcion
* Se usan con la paabra reservada 'def' seguido del nombre de la funcion
* Nos permiten reutilizar codigo
* Funcionan de manera recursiva tambien 'LLamar una funcion desde otra'
* Al final del nombre de la funcion ponemos parentesis que pueden estar vacios o contener un/unos argumento

python/28_funciones.py

<<<< Cap 40 "Argumentos"
* Los argumentos son valores o parametros necesarios para usar la funcion

python/29_argumentos.py

<<<< Cap 41 "Exepciones"
* Los errores inexperados finalizan nuestros programas.
* Los errores suelen describir claramente donde se encuentra el error

python/30_errores.py

<<<< Cap 42 "Try - Except - Finally"
* Nos permite intentar ejecutar codigo 
* la sintaxis es la siguiente

  try:
    print('hola')
  except:
    print('No pude saludar :/')
  Finally
    print('Hola nuevamente.. o por primera vez?')

python/31_try_except_finally.py

>>>> Seccion 5 "Web Scrapping"
<<<< Cap 43 "Web Scrapping Offline"
* Tecnica para realizar extraccion de informacion de sitios web
  Trataremos de simular la navegacion convencional de un ser humano por el
  protocolo http

es la web que se usa como ejemplo
lorem2.com

web_scrapping/1_webscrapper.py

<<<< Cap 44 "Web Scrapping Offline 2"
web_scrapping/2_webscrapper.py

<<<< Cap 45 "Web Scrapping Offline 3"
web_scrapping/3_webscrapper.py

<<<< Cap 46 "Web Scrapping y Automatizacion con Selenium"

>>>> Seccion 6 "Lectura de archivos JSON y XML"
<<<< Cap 47 "Lectura de archivos XML"
sec6/xml_reader.py

Enlace Ejemplo:
https://www.w3schools.com/xml/simple.xml

<<<< Cap 48 "Lectura de archivos JSON"
sec6/json_reader.py

>>>> Seccion 7 "Bonus"
<<<< Cap 49 "Lectura Bonus - ?Y ahora que?"

Redes sociales:
➡️ Youtube.
  https://youtube.com/@anormalix
➡️ Facebook.
  https://m.facebook.com/lionguardacademy
➡️ TikTok.
  https://vm.tiktok.com/ZMFw2Kncv/
➡️ Instagram.
  https://instagram.com/anormalix_oficial?igshid=YmMyMTA2M2Y=
➡️ Mi cuenta de Linkedin.
  https://www.linkedin.com/in/pedro-javier-vargas
