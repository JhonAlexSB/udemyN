Curso:
https://www.udemy.com/course/sql-creacion-de-bd/

Instructor:
https://www.udemy.com/user/numpi/

Este curso incluye:
2 horas de vÃ­deo bajo demanda
9 recursos descargables

>>>> Seccion
<<<< Capitulo
.... Recursos
---- Enlaces


>>>> Seccion 1 "Introduccion"
<<<< Cap 1 "Bienvenido a Numpi"
<<<< Cap 2 "Bienvenido al curso"
<<<< Cap 3 "?Que es una base de datos?"
se usa DBMS
<<<< Cap 4 "SQL y MySQL"
SQL
  LDD . Lenguaje de Definicion de Datos
  LMD . Lenguaje de Mnipulacion de Datos
  LCD . Lenguaje de Control de Datos

MySQL
  RDBMS

<<<< Cap 5 "Descarga"
  escribir en google : mysql download

<<<< Cap 6 "Instalacion"
  Seleccionar "Full" opcion
  Siguiente y sguiente en el archivo descargado

<<<< Cap 7 "Mysql Workbench"
<<<< Cap 8 "Leer base de datos Sakila"
  show databases;
  use sakila;
  show tables;
  select * from city;

>>>> Seccion 2 "Lenguaje de definicion de datos"
<<<< Cap 9 "Introduccion"
<<<< Cap 10 "Tipos de datos"
Cualitativos y Cuantitativos

* Numericos
BIT (size)
TINYINT (size)
BOOL
BOOLEAN
SMALLINT(size)

* Hilos de caracere
CHAR (size)
VARCHAR (size)
BINARY (size)

* Fecha y tiempo
DATE
DATETIME(fsp)
TIMESTAMP(fsp)

<<<< Cap 11 "?Que es una Primary Key?"
Identificador unico
Todas las tablas tienen una

<<<< Cap 12 "?Que es una Foreing Key?"
Establece un vinculo con una llave primaria

<<<< Cap 13 "Agregar y quitar columnas"
# Crear una tabla a partir de otra
CREATE TABLE koy SELECT city_id, phone, district FROM address;

# Borrar columna
ALTER TABLE koy
DROP COLUMN district;

# Agregar columna
ALTER TABLE koy
ADD COLUMN nuevo_distrito varchar(20);

<<<< Cap 14 "Eliminar tablas"
DROP TABLE koy;

<<<< Cap 15 "Truncar tablas"
# Se usar para eliminar los datos de las tablas
# Se crea otra copia de address en la tabla koy
CREATE TABLE koy SELECT city_id, phone, district FROM address;

SELECT * FROM koy;
TRUNCATE TABLE koy;
SELECT * FROM koy;

>>>> Seccion 3 "Alter table"
<<<< Cap 16 "Introduccion"
<<<< Cap 17 "Agregar y quitar Primary Keys"
# Crear y seleccionar base de datos grupos

CREATE DATABASE grupos;
USE grupos;

# Se crea una tabla
CREATE TABLE zonas (
  id INT NOT NULL,
  dir_cod INT NOT NULL,
  dir VARCHAR(20),
  nombre VARCHAR(20)
);

# Se describe la tabla pero no tiene llave primaria
DESC zonas;

# Se crea llave primaria
ALTER TABLE zonas ADD PRIMARY KEY (id);

# Se crea otra tabla con llave primaria
CREATE TABLE grupo_1 (
  id INT NOT NULL,
  nombre VARCHAR(20),
  dir_cod INT NOT NULL,
  PRIMARY KEY (id)
);

# Borrar llave primaria

ALTER TABLE zonas DROP PRIMARY KEY;
DESC zonas;

<<<< Cap 18 "Agregar y quitar Foreing Keys"
# Pude que de error si se sigue al pie de la letra los comandos se borro la
# llave primaria de zonas y no se agrego otra vez

#  La llave foranea aparece en la desc como MUL

ALTER TABLE grupo_1
ADD CONSTRAINT fk_zonasid
FOREIGN KEY (dir_cod) REFERENCES zonas(id);

CREATE TABLE grupo_2 (
  id INT NOT NULL,
  nombre VARCHAR(20),
  dir_cod INT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (dir_cod) REFERENCES zonas(id)
);

DESC grupo_2;

# Borrar llave foranea
ALTER TABLE grupo_1 
DROP FOREIGN KEY fk_zonasid;

(Error) No borra la llave foranea
 
<<<< Cap 19 "Agregar Unique Constraint"
# UNIQUE es para que nunca se repitan los valores en esa columna

DESC grupo_1;

#  La el constraint en la desc es como UNI
ALTER TABLE grupo_1
ADD CONSTRAINT u_nombre UNIQUE (nombre);

CREATE TABLE grupo_3 (
  id ID NOT NULL,
  dir_id INT NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (dir_id)
);

ALTER TABLE grupo_1
DROP INDEX u_nombre;

<<<< Cap 20 "Cambiar el nombre de una columna"
DESC grupo_1;
SELECT * FROM grupo_1;

# Cambiar nombre
ALTER TABLE grupo_1 CHANGE nombre apellido VARCHAR(8);

<<<< Cap 21 "Cambiar el 'Data Type' de una columna"
DESC grupo_2;

# Cambiar tipo de dato
ALTER TABLE grupo_2 MODIFY nombre char(12);

<<<< Cap 22 "Ejercicio"
Parte 1:
  Crear tres tablas definidas con la siguiente estructura:
    Mascotas.
      Campos: ID,NOMBRE,ID_DUENO,SERVICIO
    personas.
      Campos: ID,NOMBRE,APELLIDO,COD_ZIP,TLF,EMAIL
    DIRECCIONES.
      Campos: ZIP,NOMBRE_ZONA,RUTA

Parte 1:

CREATE DATABASE vet;
USE vet;

CREATE TABLE mascotas (
  id INT NOT NULL,
  nombre VARCHAR (20),
  id_dueno INT NOT NULL,
  servicio VARCHAR (20)
);

CREATE TABLE personas (
  id INT NOT NULL,
  nombre VARCHAR (20),
  apellido VARCHAR (20),
  codigo_zip VARCHAR (20),
  tlf VARCHAR (20)
);

CREATE TABLE direcciones (
  zip VARCHAR (20),
  nombre_zona VARCHAR (20),
  ruta VARCHAR (20)
);

Parte 2:

  al campo ZIP en la tabla Direcciones
  * Agrega una UNIQUE CONSTRAINT a la columna EMAIL de la tabla Personas
  * Cambia el nombre a la columna NOMBRE en la tabla Mascotas por PRIMER_NOMBRE
  * Cambia el tipo de dato a la columna RUTA en la tabla Direcciones por CHAR(12)

  * Agregar una PRIMARY KEY al campo ID en las tablas Mascotas y Personas.
ALTER TABLE personas ADD PRIMARY KEY (id);
ALTER TABLE mascotas ADD PRIMARY KEY (id);

  * Agrega una FOREIGN KEY  al campo ID_DUENO en la tabla Mascotas que referencie
  al campo ID en la tabla Personas.
ALTER TABLE mascotas
ADD CONSTRAINT fk_iddueno_personasid
FOREIGN KEY (id_dueno) REFERENCES personas(id);

  * Agrega una FOREIGN KEY al campo ZIP_COD en la tabla Personas que referencie
  al campo ZIP en la tabla Direcciones
ALTER TABLE personas
ADD CONSTRAINT fk_zipcode_zip
FOREIGN KEY (codigo_zip) REFERENCES direcciones(zip);

  * Agrega una UNIQUE CONSTRAINT a la columna EMAIL de la tabla Personas
  * Cambia el nombre a la columna NOMBRE en la tabla Mascotas por PRIMER_NOMBRE

  * Cambia el tipo de dato a la columna RUTA en la tabla Direcciones por CHAR(12)
ALTER TABLE direcciones CHANGE rutas CHAR(8);

Parte 2:
  * Agregar una PRIMARY KEY al campo ID en las tablas Mascotas y Personas.
  * Agrega una FOREIGN KEY  al campo ID_DUENO en la tabla Mascotas que referencie
  al campo ID en la tabla Personas.
  * Agrega una FOREIGN KEY al campo ZIP_COD en la tabla Personas que referencie
  al campo ZIP en la tabla Direcciones
  * Agrega una UNIQUE CONSTRAINT a la columna EMAIL de la tabla Personas
  * Cambia el nombre a la columna NOMBRE en la tabla Mascotas por PRIMER_NOMBRE
  * Cambia el tipo de dato a la columna RUTA en la tabla Direcciones por CHAR(12)



<<<< Cap 23 "Solucion al ejercicio"

# EJERCICIO 1.1

  CREATE DATABASE vet;
  USE vet;

# A) CREAR TABLA MASCOTAS, CAMPOS: ID, NOMBRE, SERVICIO

  CREATE TABLE MASCOTAS (
    ID INT NOT NULL,
    NOMBRE VARCHAR (8),
    ID_DUENO INT NOT NULL,
    SERVICIO VARCHAR (12)
  );

# B) CREAR TABLA PERSONAS, CAMPOS: ID, NOMBRE, APELLIDO ID_DUENO, COD_ZIP, TLF

  CREATE TABLE PERSONAS (
    ID INT NOT NULL,
    NOMBRE VARCHAR (8),
    APELLIDO VARCHAR (12),
    ID_DUENO INT NOT NULL,
    COD_ZIP INT NOT NULL,
    TLF INT
  );


# C) CREAR TABLA DIRECCIONES, CAMPOS: ZIP, NOMBRE_ZONA, RUTA 

  CREATE TABLE DIRECCIONES (
    ZIP INT NOT NULL,
    NOMBRE_ZONA VARCHAR (8),
    RUTA VARCHAR (50)
  );

  DESC PERSONAS;
  DESC MASCOTAS;
  DESC DIRECCIONES;

# EJERCICIO 1.2

# A) Agregar PK al campo ID en vet.MASCOTAS

  DESC MASCOTAS;

  ALTER TABLE vet.MASCOTAS
  ADD PRIMARY KEY (ID);

  DESC MASCOTAS;

# B) Agregar PK al campo ID en vet.PERSONAS

  DESC PERSONAS;

  ALTER TABLE vet.PERSONAS
  ADD PRIMARY KEY (ID);

  DESC PERSONAS;

# C) Agregar PK al campo ZIP EN vet.DIRECCIONES

  DESC DIRECCIONES;

  ALTER TABLE vet.DIRECCIONES
  ADD PRIMARY KEY (ZIP);

  DESC DIRECCIONES;

# D) Agreagar FK al campo ID_DUENO en vet.MASCOTAS -> ID en vet.PERSONAS

  DESCRIBE vet.MASCOTAS;

  ALTER TABLE vet.MASCOTAS
  ADD CONSTRAINT FK_DUENOS_ID
  FOREIGN KEY (ID_DUENO) REFERENCES vet.PERSONAS(ID);

  DESCRIBE vet.MASCOTAS;


# D) Agreagar FK al campo zipcode en vet.PERSONAS -> zip en vet.DIRECCIONES

  DESCRIBE vet.PERSONAS;

  ALTER TABLE vet.PERSONAS
  ADD CONSTRAINT FK_ZIP_DIR
  FOREIGN KEY (COD_ZIP) REFERENCES vet.DIRECCIONES(ZIP);

  DESCRIBE vet.PERSONAS;

# E) Agregar columna a email en vet.PERSONAS

  DESCRIBE vet.PERSONAS;

  ALTER TABLE vet.PERSONAS
  ADD COLUMN EMAIL VARCHAR(50);

  DESCRIBE vet.PERSONAS;

# F) Agregar UNIQUE CONSTRAINT a Email en vet.PERSONAS

  DESC vet.PERSONAS;


  ALTER TABLE PERSONAS
  ADD CONSTRAINT U_EMAIL
  UNIQUE (EMAIL);


# G) Cambiar el nombre al campo NOMBRE en vet.MASCOTAS -> PRIMER_NOMBRE

  DESC MASCOTAS;

  ALTER TABLE MASCOTAS
  RENAME COLUMN NOMBRE TO PRIMER_NOMBRE;

# H) Cambia el tipo de campo de la tabla RUTA en vet.DIRECCIONES -> CHAR(12)

  DESC DIRECCIONES;

  ALTER TABLE DIRECCIONES
  MODIFY RUTA CHAR(12);


>>>> Seccion 4 "Lenguaje de manipulacion de los datos"


<<<< Cap 24 "Introduccion"
<<<< Cap 25 "Insertar datos en una tabla"

CREATE DATABASE BODEGA;
USE BODEGA;

CREATE TABLE PRODUCTOS (
  ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  NOMBRE VARCHAR (28),
  PRECIO FLOAT,
  PROVEEDOR VARCHAR (28)
);

DESC PRODUCTOS;

SELECT * FROM PRODUCTOS;

INSERT INTO PRODUCTOS (NOMBRE, PRECIO, PROVEEDOR) 
VALUES 
  ("CAFE", 3.99, "LUCKY-LUCAS-CA");

SELECT * FROM PRODUCTOS;

INSERT INTO PRODUCTOS (NOMBRE, PRECIO, PROVEEDOR) 
VALUES 
  ("HARINA DE TRIGO", 1.75, "EL_HORNO_DE_ATENAS"),
  ("GASEOSA", 1.50, "YORELIS_2007");

SELECT * FROM PRODUCTOS;

# Ejercicio 4.1 
  INGRESAR DATOS EN LA TABLA PRODUCTOS

INSERT INTO PRODUCTOS (NOMBRE, PRECIO, PROVEEDOR) 
VALUES 
  ("MANTEQUILLA", 2, "MILANAT"),
  ("GALLETA DE VAINILLA", 2, "DELICIAS_XIOMARA"),
  ("ENCENDEDORES", 0.9, "LUCKY-LUCAS-CA"),
  ("LECHE", 1.75, "MILANAT"),
  ("MANTEQUILLA", 2, "MILANAT"),
  ("GOMITAS", 0.9, "CHUCHU_ELDULCE");

SELECT * FROM PRODUCTOS;

SELECT * FROM PRODUCTOS;


<<<< Cap 26 "Actualizar datos en una tabla"

USE BODEGA;
SELECT * FROM PRODUCTOS;

UPDATE PRODUCTOS
SET PROVEEDOR = "MOLTISANTI_CA"
WHERE ID = 1; # por default solo se puede usar la columna ID por que es PK

# Actualizar mas de una columna a la vez
SET SQL_SAFE_UPDATES; # ESTO CAMBIA LA CONFIGURACION PARA USAR MAS DE UN DATO A LA VEZ

UPDATE PRODUCTOS
SET PRECIO = 0.9, PROVEEDOR = "MILANAT"
WHERE NOMBRE = "GASEOSA";


# Actualizar dos filas a la vez

UPDATE PRODUCTOS
SET PROVEEDOR = "MOLTISANTI_CA"
WHERE PROVEEDOR = "LUCKY-LUCAS-CA"

<<<< Cap 27 "Borrar datos de una tabla"
USE BODEGA;

CREATE TABLE PERSONAS(
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NOMBRE VARCHAR(20),
  EDAD INT,
  PAIS VARCHAR(20)
);

SELECT * FROM PERSONAS;

INSERT INTO PERSONAS (NOMBRE, EDAD, PAIS)
VALUES
('Sergio', 20, 'Cuba'),
('Jenny', 24, 'Argentina'),
('Rafael', 22, 'Mexico'),
('Furiyel', 23, 'Venezuela'),
('Berenjenio', 19, 'Colombia'),
('Joana', 22, 'Mexico')
;

# Eliminar una fila

DELETE FROM PERSONAS
WHERE NOMBRE = 'FURIYEL';


# Eliminar varias filas

DELETE FROM PERSONAS
WHERE PAIS = 'MEXICO';


# Eliminar todas las filas

DELETE FROM PERSONAS;


<<<< Cap 28 "Completando nuestra base de datos Sakila"
USE sakila;

SELECT * FROM ACTOR;

desc actor;

insert into sakila.actor (actor_id, first_name, last_name)
values
(201, 'Fiora', 'Bela');

('Fiorella', 'Guelini'),
('Liv', 'Tyler'),
('Helen', 'Grady'),
('Hector', 'Troya'),
('Hugo', 'Balbuena'),
('Robert', 'Pattison'),
('Fred', 'Thompson'),
('Nuvo', 'Milano');


>>>> Seccion 5 "Diseno de una base de datos"
<<<< Cap 29 "Introduccion"
<<<< Cap 30 "Normalizacion de bases de datos"

* Normalizar es el proceso de organizar los datos efectivamente dentro de una
Base de Datos

* En cada tabla se desea:
  - Conservar solo los datos relacionados entre si y reubicar los datos no
    relacionados en otra tabla
  - Eliminar datos redundantes

* Beneficios de la normalizacion
  - Reducir espacio de almacenamiento
  - Reducir anomalias de LMD (Lenguaje de Manejo de Datos)
  - Mejorar el desempeno general de las consultas

<<<< Cap 31 "1st Normal Form (1NF)"

* Una tabla sigue la Primera forma normal si:
  - Ninguna fila de datos esta repetida.
  - Cada columna tiene un valor unico.
  - La tabla tiene una Primary Key.

<<<< Cap 32 "2nd Normal Form (2Nf)"

* Una tabla sigue la Segunda forma normal si:
  - Sigue las reglas de la Primera forma normal.
  - Toda Columna que no es CLAVE PRIMARIA es dependiente de la CLAVE PRIMARIA
    ENTERA.

<<<< Cap 33 "3rd Normal Form (3NF)"

* Una tabla sigue la Tercera forma normal si:
  - Sigue las reglas de la Segunda forma normal.
  - Toda Columna no primaria (No forma parte de la PRIMARY KEY)
    No depende de otra columna no primaria.

<<<< Cap 34 "Relaciones"

* En un RDBMS (Sistema de Base de Datos Relacional) las tablas estan
  relacionadas entre si a las clavez primarias y foraneas.

* Relaciones: Sus columnas estan vinculadas y restringidas entre si.

* Las relaciones pueden ser:
  - Uno a Uno.
  - Uno a Muchos.
  - Muchos a Muchos.

<<<< Cap 35 "Relacion uno a uno (one to one)"

* Esta relacion se da cuando la KEY (clave) aparece no mas de una vez como KEY
  en otra tabla y viceversa.

<<<< Cap 36 "Relacion uno a muchos (many to one)"

* Esta relacion se da cuando los valores de la PRIMARY KEY de una tabla puede
  estar en multiples filas de una FOREIGN KEY en otra tabla.

<<<< Cap 37 "Relacion muchos a muchos (many to many)"

* Esta relacion se da cuando dos tablas pueden tener multiples instancias de si
  mismas.
* Para esta relacion es necesario crear una tabla adicional

<<<< Cap 38 "Constraint"

* Las Constraints (Restricciones) se colocan a las columnas dentro de las
  tablas.
* Las Constraints restringen los datos que pueden ser insertados en la columna.
* Tipos de retricciones que ya vimos:
  - NOT NULL
  - UNIQUE
  - PRIMARY KEY
  - FOREIGN KEY
* Otros tipos de Constraints:
  - CHECK: Esto controla el tipo de datos que se ingresaran en el campo.
      CHECK (AGE BETWEEN 18 AND 28).
  - DEFAULT: Si ningun valor es asignado al campo, esto permite agregar un valor
    predeterminado.
      Apellido DEFAULT 'Romero'

<<<< Cap 39 "Constraint (Ejemplo)"

USE BODEGA;

CREATE TABLE EMPLEADOS(
  ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  APELLIDO VARCHAR(28),
  NOMBRE VARCHAR(28),
  EDAD INT NOT NULL,
  LOCAL_NOMBRE VARCHAR(28) DEFAULT 'Los proceres',
  CONSTRAINT CK_EDAD CHECK (EDAD >= 18)
);

DESC EMPLEADOS;


INSERT INTO EMPLEADOS (APELLIDO, NOMBRE, EDAD)
VALUES
  ('Tantamo', 'Ernesto', 23),
  ('Pozo', 'Alejandro', 20)
;

select * from EMPLEADOS;

INSERT INTO EMPLEADOS (APELLIDO, NOMBRE, EDAD)
VALUES
  ('Borja', 'Juan', 15)
;

ALTER TABLE EMPLEADOS
ALTER EDAD SET DEFAULT 19;

INSERT INTO EMPLEADOS (APELLIDO, NOMBRE)
VALUES
  ('Borja', 'Juan')
;


>>>> Seccion 6 "Caso Practico:Base de datos de un cine"
<<<< Cap 40 "Introduccion"
<<<< Cap 41 "Esquema de la base de datos"

IMG: 
---- Enlace
  https://asset.cloudinary.com/dd60okmsj/08d9e313ba5ff643d354b1507df66931

<<<< Cap 42 "Creacion de la tabla de Peliculas"

SHOW DATABASES;

CREATE DATABASE SIS_RESERVACIONES;

USE SIS_RESERVACIONES;

CREATE TABLE PELICULAS(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  NOMBRE VARCHAR(45) NOT NULL UNIQUE,
  DUR_MIN INT NOT NULL
);

SHOW TABLES;
DESC PELICULAS;

<<<< Cap 43 "Creacion de la tabla de Clientes"

CREATE TABLE CLIENTES(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  NOMBRE VARCHAR(45),
  APELLIDO VARCHAR(45) NOT NULL,
  EMAIL VARCHAR(45) NOT NULL UNIQUE
);

<<<< Cap 45 "Creacion de la tabla de Salas"

CREATE TABLE SALAS(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  NOMBRE VARCHAR(45) NOT NULL,
  N_ASIENTOS INT NOT NULL
);

<<<< Cap 45 "Creacion de la tabla de Funciones"

CREATE TABLE FUNCIONES(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_PELICULA INT NOT NULL,
  ID_SALA INT NOT NULL,
  HORA_INICIO DATETIME NOT NULL,
  FOREIGN KEY (ID_PELICULA) REFERENCES PELICULAS(ID),
  FOREIGN KEY (ID_SALA) REFERENCES SALAS(ID)
);

<<<< Cap 46 "Creacion de la tabla de Asientos"

CREATE TABLE ASIENTOS(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  FILA CHAR(1) NOT NULL,
  NUMERO INT NOT NULL,
  ID_SALA INT NOT NULL,
  FOREIGN KEY (ID_SALA) REFERENCES SALAS(ID)
);

<<<< Cap 47 "Creacion de la tabla de Reservaciones"

CREATE TABLE RESERVACIONES(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_FUNCION INT NOT NULL,
  ID_CLIENTE INT NOT NULL,
  FOREIGN KEY (ID_FUNCION) REFERENCES FUNCIONES(ID),
  FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID)
);

<<<< Cap 48 "Creacion de la tabla de Asientos reservados..."

CREATE TABLE ASIENTOS_RESERVADOS(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_RESERVACIONES INT NOT NULL,
  ID_ASIENTO INT NOT NULL,
  FOREIGN KEY (ID_RESERVACIONES) REFERENCES RESERVACIONES(ID),
  FOREIGN KEY (ID_ASIENTO) REFERENCES ASIENTOS(ID)
);

<<<< Cap 49 "Insertar los datos"


>>>> Seccion 7 ""
