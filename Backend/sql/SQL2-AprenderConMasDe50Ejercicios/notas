Curso:
https://www.udemy.com/course/aprende-sql-nivel-avanzado-curso-con-mas-de-50-ejercicios/

Instructor:
https://www.udemy.com/user/numpi/

Este curso incluye:
1 hora de vídeo bajo demanda
11 artículos
1 recurso descargable


>>>> Seccion
<<<< Capitulo
.... Recursos
---- Enlaces


>>>> Seccion 1 "Introduccion"

<<<< Cap 1 "Bienvenido a numpi"
<<<< Cap 2 "Bienvenido al curso"
<<<< Cap 3 "Instalacion"
.... Recursos

>>>> Seccion 2 "Funciones Utiles"

<<<< Cap 4 "CHAR_LENGTH()"
select * from category;
SELECT name,CHAR_LENGTH(name) as LongitudCadena FROM category;

select * from city;
SELECT city,CHAR_LENGTH(city) FROM city;


<<<< Cap 5 "CONCAT()"
SELECT * FROM customer;
 
SELECT customer_id, CONCAT(first_name, last_name) as "Nombre completo" from customer;
SELECT customer_id, CONCAT(first_name, " ", last_name) as "Nombre completo" from customer;

<<<< Cap 6 "CONCAT_WS()"
SELECT * FROM film;
SELECT CONCAT_WS(" - ", title, description, release_year) FROM film;


<<<< Cap 7 "ROUND()"
SELECT * FROM payment;

SELECT rental_id, amount, ROUND(amount,0) FROM payment;


<<<< Cap 8 "UCASE(), LCASE()"
SELECT * FROM actor;

SELECT 
first_name, last_name,
LCASE( CONCAT(first_name, " ", last_name) ) as "Nombre Completo"FROM actor;


<<<< Cap 9 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio

>>>> Seccion 3 "INSERT INTO"

<<<< Cap 10 "Ejercicio 1"
SELECT * FROM city;
INSERT INTO city (city,country_id) VALUES ('prueba', 100)
INSERT INTO city (city_id,city,country_id) VALUES (601, 'prueba', 100)

<<<< Cap 11 "Ejercicio 2"
SELECT * FROM ACTOR;
INSERT INTO actor (first_name, last_name) VALUES ('CARLOS','BERNAL');

<<<< Cap 12 "Ejercicio 3"
SELECT * FROM category;
INSERT INTO category (name) VALUES ('CIENCIA FICCION');


<<<< Cap 13 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio


>>>> Seccion 4 "UPDATE"
<<<< Cap 14 "Ejerciocio 1"
SELECT * FROM city;
UPDATE city SET city = 'NEW YORK' WHERE country_id = 87;

<<<< Cap 15 "Ejerciocio 2"
SELECT * FROM actor;
UPDATE actor set first_name = 'RAUL' WHERE last_name = 'GUINESS':

<<<< Cap 16 "Ejerciocio 3"
SELECT * FROM staff;
UPDATE staff SET first_name = 'Pablo' WHERE staff_id = 2;

<<<< Cap 17 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio

>>>> Seccion 5 "ALTER TABLE"
<<<< Cap 18 "Ejercicio 1"
desc actor;

ALTER TABLE actor ADD COLUMN genero_actor char(1);
 
DESC actor;

ALTER TABLE actor DROP COLUMN genero_actor;

<<<< Cap 19 "Ejercicio 1"
SELECT * FROM actor;

UPDATE actor SET genero_actor = 'M' WHERE actor_id = 1;
UPDATE actor SET genero_actor = 'M' WHERE actor_id = 2;
UPDATE actor SET genero_actor = 'F' WHERE actor_id = 3;

<<<< Cap 20 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio


>>>> Seccion 6 "CASE"
<<<< Cap 21 "Ejercicio 1"
SELECT * FROM address;

SELECT address, address2,
CASE 
  WHEN address2 IS NULL THEN 'Sin direcicon2'
  ELSE 'Con direccion'
  END AS Comentario
  FROM address;

<<<< Cap 22 "Ejercicio 2"
SELECT * FROM payment;

SELECT payment_id, amount,
CASE 
  WHEN amount <1 THEN 'Precio Minimo'
  WHEN amount BETWEEN 1 AND 3 THEN 'Precio Intermedio'
  ELSE 'Precio Maximo'
END AS Comentario
FROM payment;

<<<< Cap 23 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio


>>>> Seccion 7 "Consultas Multiples"
<<<< Cap 24 "Ejercicio 1"
?Quien ha vendido mas del staff en agosto del 2005
SELECT * FROM staff;

SELECT 
a.first_name,
a.last_name,
sum(b.amount) as 'Total amount'
FROM staff a
INNER JOIN payment p on  (a.staff_id = p.staff_id)
AND b.payment_date lIKE '2005-08%'
GROUP BY a.first_name, a.last_name

'Tabla STAFF da error en termux'[Error]

<<<< Cap 25 "Ejercicio 2"
"Haga una lista de cada pelicula y el numero de actores que figuran en esa
pelicula. Utiliza tablas film_actor y film"

desc film_actor;

SELECT * FROM actor a 
INNER JOIN film b ON (a.film_id=b.film_id);

SELECT 
b.title,
count(actor_id) as 'Contador de Actores'
FROM actor a 
INNER JOIN film b ON (a.film_id=b.film_id) 
GROUP BY b.title;

" Actor no tiene tabla film_id"[Error]

<<<< Cap 26 "Ejercicio 3"
"?Cuantas copias de la pelicula Hunchback Impossible existen en el sistema de inventario"

SELECT * FROM film;

SELECT * FROM film f
INNER JOIN inventory i ON (f.film_id=i.film_id);

SELECT 
title,
COUNT(title) AS 'COPIAS DISPONIBLES'
FROM film 
INNER JOIN inventory ON (film.film_id = inventory.film_id)
WHERE title = 'Hunchback Impossible';

<<<< Cap 27 "Ejercicio 4"
"Anote el total pagado por cada cliente, Listar los clientes alfabeticamente por apellido"

SELECT 
first_name,
last_name,
sum(amount) AS 'Total Pagado por cliente'
FROM payment p
INNER JOIN customer c ON (p.customer_id=c.customer_id)
GROUP BY first_name, last_name
ORDER BY last_name;

<<<< Cap 28 "Ejercicios para el estudiante"
.... Recursos
ArticuloEjercicio

<<<< Cap 29 "Respuesta"
ArticuloSolucion

>>>> Seccion 8 "SUBQUERIES"

<<<< Cap 30 "Ejercicio 1"
<<<< Cap 31 "Ejercicio 2"
<<<< Cap 32 "Ejercicio 3"
<<<< Cap 33 "Ejercicios para el estudiante"
<<<< Cap 34 "Respuesta"

>>>> Seccion 9 "VIEWS"

<<<< Cap 35 "Ejercicio 1"
<<<< Cap 36 "Ejercicios para el estudiante"

>>>> Seccion 10 "Codigos del curso"

<<<< Cap 37 "Codigo"

>>>> Seccion 11 "Terminaste"

<<<< Cap 38 "Nos vemos en clase"
